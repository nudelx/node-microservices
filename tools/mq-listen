#!/usr/bin/env node
const stompit = require('stompit')
const exec = require('child_process').execSync

const argv = require('yargs')
  .usage(
    `Usage:  <filename> -h localhost -q /test/test
    
    -h    [host/ip] 
    -q    [queue] 
    -p    [port| default: 61613], 
    -u    [user] 
    -pass [password]`
  )
  .demandOption(['q', 'h']).argv

console.log(exec('clear', { encoding: 'utf8' }))
console.log('Listening on', argv, '\n\n')

const connectOptions = {
  host: argv.h,
  port: argv.p || 61613,
  timeout: 30000,
  connectHeaders: {
    host: argv.h,
    'heart-beat': '1000,2000',
    login: argv.u,
    passcode: argv.pass
  }
}
const manager = new stompit.ConnectFailover([connectOptions], {
  maxReconnects: 10
})

manager.connect(function(error, client, reconnect) {
  if (error) {
    // console.log('connect error ' + error.message)
    reconnect()
    // return
  }

  client.on('error', function(error) {
    // console.error('This is error', error)
    reconnect()
  })

  client.on('connecting', function(connector) {
    console.log('Could not connect to ' + connector)
  })

  const subscribeHeaders = {
    timeout: 30000,
    destination: argv.q,
    ack: 'client',
    heartbeat: [1000, 3000]
  }

  client.subscribe(subscribeHeaders, function(error, message) {
    if (error) {
      // console.log('subscribe error ' + error.message)
      return
    }

    message.readString('utf-8', function(error, body) {
      if (error) {
        console.log('read message error ' + error.message)
        return
      }
      console.log(' ðŸ“©  message received: \n \n' + body + '\n\n')
      client.ack(message)
    })
  })
})
